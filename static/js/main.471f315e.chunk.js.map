{"version":3,"sources":["components/Section/Section.js","components/feedback/feedbackOptions.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js"],"names":["Section","title","children","FeedBackOptions","onLeaveFeedback","className","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","React","useState","setGood","setNeutral","setBad","countTotalFeedback","target","textContent","state","toFixed","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAaeA,MAXf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACA,oCACE,6BAAKD,IACJC,M,MCYUC,MAjBf,YAA+C,IAApBC,EAAmB,EAAnBA,gBACzB,OACE,qCACE,wBAAQC,UAAU,cAAcC,QAASF,EAAzC,kBAIA,wBAAQC,UAAU,cAAcC,QAASF,EAAzC,qBAIA,wBAAQC,UAAU,cAAcC,QAASF,EAAzC,qBCQSG,G,MAjBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,qBAAIP,UAAU,kBAAd,UACE,wCAAWG,EAAX,OACA,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,YCLWC,MAJf,YAAoC,IAAZC,EAAW,EAAXA,QACpB,OAAO,4BAAIA,K,MCwDAC,MAnDf,WAAgB,IAAD,EACWC,IAAMC,SAAS,GAD1B,mBACNT,EADM,KACAU,EADA,OAEiBF,IAAMC,SAAS,GAFhC,mBAENR,EAFM,KAEGU,EAFH,OAGSH,IAAMC,SAAS,GAHxB,mBAGNP,EAHM,KAGDU,EAHC,KAsBPC,EAAqB,WACzB,OAAOb,EAAOC,EAAUC,GAO1B,OACE,sBAAKL,UAAU,YAAf,UACE,cAAC,EAAD,CAASJ,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBG,gBA5BF,SAAC,GAGpB,OAHmC,EAAbkB,OACFC,aAGlB,IAAK,OACHL,GAAQ,SAAAM,GAAK,OAAIA,EAAQ,KACzB,MACF,IAAK,UACHL,GAAW,SAAAK,GAAK,OAAIA,EAAQ,KAC5B,MACF,IAAK,MACHJ,GAAO,SAAAI,GAAK,OAAIA,EAAQ,KACxB,MACF,QACE,aAgBF,cAAC,EAAD,CAASvB,MAAM,aAAf,SAC4B,IAAzBoB,IACC,cAAC,EAAD,CACEb,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOU,IACPT,mBAjB8B,WACtC,IAAMD,EAAQU,IACd,OAAOV,GAAUH,EAAOG,EAAS,KAAKc,QAAQ,GAAK,EAevBC,KAGtB,cAAC,EAAD,CAAcZ,QAAQ,4BC/ChCa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.471f315e.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n  <section>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </section>\r\n );\r\n}\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\nexport default Section;\r\n","import './feedback.css';\r\nfunction FeedBackOptions({ onLeaveFeedback }) {\r\n  return (\r\n    <>\r\n      <button className=\"item_button\" onClick={onLeaveFeedback}>\r\n        Good\r\n      </button>\r\n\r\n      <button className=\"item_button\" onClick={onLeaveFeedback}>\r\n        Neutral\r\n      </button>\r\n\r\n      <button className=\"item_button\" onClick={onLeaveFeedback}>\r\n        Bad\r\n      </button>\r\n    </>\r\n  );\r\n}\r\nexport default FeedBackOptions;\r\n","import PropTypes from 'prop-types';\r\nimport './Statistics.css';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <ul className=\"item_statistics\">\r\n    <li>Good: {good} </li>\r\n    <li>Neutral: {neutral}</li>\r\n    <li>Bad: {bad}</li>\r\n    <li>Total: {total}</li>\r\n    <li>Positive feedback: {positivePercentage}%</li>\r\n  </ul>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.string.isRequired,\r\n};\r\nexport default Statistics;\r\n","function Notification({ message }) {\r\n    return <p>{message}</p>;\r\n}\r\n\r\nexport default Notification;\r\n","import React from 'react';\r\nimport Section from './components/Section';\r\nimport FeedbackOptions from './components/feedback';\r\nimport Statistics from './components/Statistics';\r\nimport Notification from './components/Notification';\r\nimport './App.css';\r\nfunction App() {\r\n  const [good, setGood] = React.useState(0);\r\n  const [neutral, setNeutral] = React.useState(0);\r\n  const [bad, setBad] = React.useState(0);\r\n\r\n  const handleChange = ({ target }) => {\r\n    let option = target.textContent;\r\n\r\n    switch (option) {\r\n      case 'Good':\r\n        setGood(state => state + 1);\r\n        break;\r\n      case 'Neutral':\r\n        setNeutral(state => state + 1);\r\n        break;\r\n      case 'Bad':\r\n        setBad(state => state + 1);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n  const countTotalFeedback = () => {\r\n    return good + neutral + bad;\r\n  };\r\n  const countPositiveFeedbackPercentage = () => {\r\n    const total = countTotalFeedback();\r\n    return total ? ((good / total) * 100).toFixed(0) : 0;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Section title=\"Please leave feedback\">\r\n        <FeedbackOptions onLeaveFeedback={handleChange} />\r\n      </Section>\r\n      <Section title=\"Statistics\">\r\n        {countTotalFeedback() !== 0 ? (\r\n          <Statistics\r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            total={countTotalFeedback()}\r\n            positivePercentage={countPositiveFeedbackPercentage()}\r\n          />\r\n        ) : (\r\n          <Notification message=\"No feedback given\" />\r\n        )}\r\n      </Section>\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}